{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArrayLike = require( '@stdlib/assert-is-array-like-object' );\nvar isPositiveZero = require( '@stdlib/math-base-assert-is-positive-zero' );\nvar isNegativeZero = require( '@stdlib/math-base-assert-is-negative-zero' );\nvar format = require( '@stdlib/string-format' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes minimum and maximum values.\n*\n* @param {Collection} [out] - output array\n* @throws {TypeError} output argument must be array-like\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrminmax();\n*\n* var mm = accumulator();\n* // returns null\n*\n* mm = accumulator( 2.0 );\n* // returns [ 2.0, 2.0 ]\n*\n* mm = accumulator( -5.0 );\n* // returns [ -5.0, 2.0 ]\n*\n* mm = accumulator( 3.0 );\n* // returns [ -5.0, 3.0 ]\n*\n* mm = accumulator( 5.0 );\n* // returns [ -5.0, 5.0 ]\n*\n* mm = accumulator();\n* // returns [ -5.0, 5.0 ]\n*/\nfunction incrminmax( out ) {\n\tvar minmax;\n\tvar min;\n\tvar max;\n\tvar FLG;\n\tif ( arguments.length === 0 ) {\n\t\tminmax = [ 0.0, 0.0 ];\n\t} else {\n\t\tif ( !isArrayLike( out ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output argument must be an array-like object. Value: `%s`.', out ) );\n\t\t}\n\t\tminmax = out;\n\t}\n\tmin = PINF;\n\tmax = NINF;\n\tFLG = false;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns updated minimum and maximum values. If not provided a value, the accumulator function returns the current minimum and maximum values.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(ArrayLikeObject|null)} output array or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( FLG === false ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tminmax[ 0 ] = min; // Why? Because we cannot guarantee someone hasn't mutated the output array\n\t\t\tminmax[ 1 ] = max;\n\t\t\treturn minmax;\n\t\t}\n\t\tFLG = true;\n\t\tif ( isnan( x ) ) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t} else {\n\t\t\tif ( x < min || ( x === min && isNegativeZero( x ) ) ) {\n\t\t\t\tmin = x;\n\t\t\t}\n\t\t\tif ( x > max || ( x === max && isPositiveZero( x ) ) ) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\tminmax[ 0 ] = min;\n\t\tminmax[ 1 ] = max;\n\t\treturn minmax;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrminmax;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a minimum and maximum incrementally.\n*\n* @module @stdlib/stats-incr-minmax\n*\n* @example\n* var incrminmax = require( '@stdlib/stats-incr-minmax' );\n*\n* var accumulator = incrminmax();\n*\n* var mm = accumulator();\n* // returns null\n*\n* mm = accumulator( 2.0 );\n* // returns [ 2.0, 2.0 ]\n*\n* mm = accumulator( -5.0 );\n* // returns [ -5.0, 2.0 ]\n*\n* mm = accumulator( 3.0 );\n* // returns [ -5.0, 3.0 ]\n*\n* mm = accumulator( 5.0 );\n* // returns [ -5.0, 5.0 ]\n*\n* mm = accumulator();\n* // returns [ -5.0, 5.0 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,qCAAsC,EAC7DC,EAAiB,QAAS,2CAA4C,EACtEC,EAAiB,QAAS,2CAA4C,EACtEC,EAAS,QAAS,uBAAwB,EAC1CC,EAAQ,QAAS,iCAAkC,EACnDC,EAAO,QAAS,gCAAiC,EACjDC,EAAO,QAAS,gCAAiC,EAiCrD,SAASC,EAAYC,EAAM,CAC1B,IAAIC,EACAC,EACAC,EACAC,EACJ,GAAK,UAAU,SAAW,EACzBH,EAAS,CAAE,EAAK,CAAI,MACd,CACN,GAAK,CAACT,EAAaQ,CAAI,EACtB,MAAM,IAAI,UAAWL,EAAQ,+EAAgFK,CAAI,CAAE,EAEpHC,EAASD,CACV,CACA,OAAAE,EAAML,EACNM,EAAML,EACNM,EAAM,GACCC,EASP,SAASA,EAAaC,EAAI,CACzB,OAAK,UAAU,SAAW,EACpBF,IAAQ,GACL,MAERH,EAAQ,CAAE,EAAIC,EACdD,EAAQ,CAAE,EAAIE,EACPF,IAERG,EAAM,GACDR,EAAOU,CAAE,GACbJ,EAAMI,EACNH,EAAMG,KAEDA,EAAIJ,GAASI,IAAMJ,GAAOR,EAAgBY,CAAE,KAChDJ,EAAMI,IAEFA,EAAIH,GAASG,IAAMH,GAAOV,EAAgBa,CAAE,KAChDH,EAAMG,IAGRL,EAAQ,CAAE,EAAIC,EACdD,EAAQ,CAAE,EAAIE,EACPF,EACR,CACD,CAKAV,EAAO,QAAUQ,ICjEjB,IAAIQ,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isArrayLike", "isPositiveZero", "isNegativeZero", "format", "isnan", "PINF", "NINF", "incrminmax", "out", "minmax", "min", "max", "FLG", "accumulator", "x", "main"]
}
